{
	"info": {
		"_postman_id": "8076662c-2c3b-446f-8d2f-62fd45cea954",
		"name": "New Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15902864"
	},
	"item": [
		{
			"name": "Cheer yourself up with random dog images",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"the endpoint does not return unexpected status code\", () => {\r",
							"  // change 404 to the response code you do not expect\r",
							"  const expectedStatusCode = 404;\r",
							"\r",
							"  pm.response.to.not.have.status(expectedStatusCode);\r",
							"});\r",
							"pm.test(\"API responds within the expected treshhold\", () => {\r",
							"  // set the response time in milliseconds\r",
							"  const expectedTimeInMilliseconds = 2000;\r",
							"\r",
							"  pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"    expectedTimeInMilliseconds + 1,\r",
							"    `The endpoint did not respond within ${expectedTimeInMilliseconds} ms. Response came in ${pm.response.responseTime} ms`\r",
							"  );\r",
							"});\r",
							"\r",
							"pm.test(\"API response contains the expected fields\", () => {\r",
							"  const response = pm.response.json();\r",
							"\r",
							"  // the line below checks value of the id field is 2 (number).\r",
							"  pm.expect(response).to.have.property(\"message\");\r",
							"\r",
							"  // the line below checks value of the name field is Morty Smith (string).\r",
							"    pm.expect(response).to.have.property(\"status\");\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"success\");\r",
							"});\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://dog.ceo/api/breeds/image/random",
					"protocol": "https",
					"host": [
						"dog",
						"ceo"
					],
					"path": [
						"api",
						"breeds",
						"image",
						"random"
					]
				}
			},
			"response": []
		},
		{
			"name": "get your current IP address.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"the endpoint does not return unexpected status code\", () => {\r",
							"  // change 404 to the response code you do not expect\r",
							"  const expectedStatusCode = 404;\r",
							"\r",
							"  pm.response.to.not.have.status(expectedStatusCode);\r",
							"});\r",
							"pm.test(\"API responds within the expected treshhold\", () => {\r",
							"  // set the response time in milliseconds\r",
							"  const expectedTimeInMilliseconds = 3000;\r",
							"\r",
							"  pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"    expectedTimeInMilliseconds + 1,\r",
							"    `The endpoint did not respond within ${expectedTimeInMilliseconds} ms. Response came in ${pm.response.responseTime} ms`\r",
							"  );\r",
							"});\r",
							"\r",
							"pm.test(\"API response contains the expected fields\", () => {\r",
							"  const response = pm.response.json();\r",
							"\r",
							"  // the line below checks value of the id field is 2 (number).\r",
							"  pm.expect(response).to.have.property(\"ip\");\r",
							"\r",
							"  \r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"ip\");\r",
							"});\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.ipify.org?format=json",
					"protocol": "https",
					"host": [
						"api",
						"ipify",
						"org"
					],
					"query": [
						{
							"key": "format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get information about a random fake user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"the endpoint does not return unexpected status code\", () => {\r",
							"  // change 404 to the response code you do not expect\r",
							"  const expectedStatusCode = 404;\r",
							"\r",
							"  pm.response.to.not.have.status(expectedStatusCode);\r",
							"});\r",
							"pm.test(\"API responds within the expected treshhold\", () => {\r",
							"  // set the response time in milliseconds\r",
							"  const expectedTimeInMilliseconds = 3000;\r",
							"\r",
							"  pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"    expectedTimeInMilliseconds + 1,\r",
							"    `The endpoint did not respond within ${expectedTimeInMilliseconds} ms. Response came in ${pm.response.responseTime} ms`\r",
							"  );\r",
							"\r",
							"\r",
							"\r",
							"  \r",
							"\r",
							"\r",
							"pm.test(\"API response contians the expected header\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://randomuser.me/api/",
					"protocol": "https",
					"host": [
						"randomuser",
						"me"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		}
	]
}